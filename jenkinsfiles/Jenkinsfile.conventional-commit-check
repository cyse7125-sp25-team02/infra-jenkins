pipeline {
    agent any

    stages {
        stage('Verify Environment') {
            steps {
                sh 'node --version'
                sh 'npm --version'
            }
        }

        stage('Checkout') {
            steps {
                script {
                    sh 'git config --global user.email "jenkins@jkops.com"'
                    sh 'git config --global user.name "Jenkins"'

                    withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                        sh "git remote set-url origin https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/cyse7125-sp25-team02/infra-jenkins.git"
                        
                        sh "git fetch origin master"
                        sh "git fetch origin pull/${CHANGE_ID}/head:PR-${CHANGE_ID}"
                        
                        sh "git checkout PR-${CHANGE_ID}"
                        
                        env.PR_BASE_SHA = sh(script: 'git rev-parse origin/master', returnStdout: true).trim()
                        env.PR_HEAD_SHA = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
                        
                        echo "Checking commits from ${env.PR_BASE_SHA} to ${env.PR_HEAD_SHA}"
                        sh "git log --oneline ${env.PR_BASE_SHA}..${env.PR_HEAD_SHA}"
                    }
                }
            }
        }

        stage('Setup CommitLint') {
            steps {
                script {
                    try {
                        sh 'npm install --save-dev @commitlint/cli @commitlint/config-conventional'
                        sh 'echo "module.exports = {extends: [\'@commitlint/config-conventional\']};" > commitlint.config.js'
                    } catch (Exception e) {
                        error "Failed to setup CommitLint: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Lint Commits') {
            steps {
                script {
                    try {
                        sh "npx commitlint --from ${env.PR_BASE_SHA} --to ${env.PR_HEAD_SHA} --verbose"
                    } catch (Exception e) {
                        error "CommitLint check failed: ${e.getMessage()}"
                    }
                }
            }
        }
    }

    post {
        success {
            echo "All commits follow the conventional commit format!"
        }
        failure {
            echo "Some commits do not follow the conventional commit format. Please fix them and try again."
        }
        always {
            cleanWs()
        }
    }
}
